import pytest
import unittest
import optax
from flax import nnx     
import jax 
import os
import numpy as np
from fol.loss_functions.mechanical import MechanicalLoss2DQuad
from fol.solvers.fe_nonlinear_residual_based_solver import FiniteElementLinearResidualBasedSolver
from fol.controls.fourier_control import FourierControl
from fol.deep_neural_networks.meta_implicit_parametric_operator_learning import MetaImplicitParametricOperatorLearning
from fol.tools.usefull_functions import *
from fol.deep_neural_networks.nns import MLP,HyperNetwork

class TestMetaLearning(unittest.TestCase):

    @pytest.fixture(autouse=True)
    def _request_debug_mode(self,request):
        self.debug_mode = request.config.getoption('--debug-mode')

    def setUp(self):
        # problem setup
        test_name = 'test_meta_learning'
        self.test_directory = os.path.join(os.path.dirname(os.path.abspath(__file__)), test_name)
        create_clean_directory(self.test_directory)

        self.fe_mesh = create_2D_square_mesh(L=1,N=5)
        bc_dict = {"Ux":{"left":0.0,"right":0.1},
                   "Uy":{"left":0.0,"right":0.1}}

        material_dict = {"young_modulus":1,"poisson_ratio":0.3}
        self.mechanical_loss = MechanicalLoss2DQuad("mechanical_loss_2d",loss_settings={"dirichlet_bc_dict":bc_dict,
                                                                                "num_gp":2,
                                                                                "material_dict":material_dict},
                                                                                fe_mesh=self.fe_mesh)
        fe_setting = {"linear_solver_settings":{"solver":"PETSc-bcgsl"}}
        self.fe_solver = FiniteElementLinearResidualBasedSolver("nonlin_fe_solver",self.mechanical_loss,fe_setting)
        fourier_control_settings = {"x_freqs":np.array([2,4,6]),"y_freqs":np.array([2,4,6]),"z_freqs":np.array([0]),
                                    "beta":20,"min":1e-1,"max":1}
        self.fourier_control = FourierControl("fourier_control",fourier_control_settings,self.fe_mesh)

        fe_setting = {"linear_solver_settings":{"solver":"PETSc-bcgsl"}}
        self.linear_fe_solver = FiniteElementLinearResidualBasedSolver("linear_fe_solver",self.mechanical_loss,fe_setting)

        self.fourier_control.scale_min = -3.6441391950165527
        self.fourier_control.scale_max = 10.0

        self.fe_mesh.Initialize()
        self.mechanical_loss.Initialize()
        self.fourier_control.Initialize()
        self.linear_fe_solver.Initialize()

        self.coeffs_matrix = jnp.array([[0.17897024,0.24900086,0.28653019,0.2165933,0.23963302,0.18190986,
                                        0.30445688,0.17304319,0.27828901,0.26616984],
                                        [0.26987956,0.25202478,0.33906099,0.27196203,0.14363826,0.28560447,
                                        0.23743781,0.21978082,0.23560695,0.36889156],
                                        [0.39518719,0.27482211,0.25887451,0.21133597,0.40459931,0.23805859,
                                        0.35307977,0.26587458,0.3118189,0.38953973]])
        
        self.K_matrix = self.fourier_control.ComputeBatchControlledVariables(self.coeffs_matrix)

    def test_one_modulator_per_synthesizer_layer(self):

        # design synthesizer & modulator NN for hypernetwork
        synthesizer_nn = MLP(name="synthesizer_nn",
                            input_size=3,
                            output_size=2,
                            hidden_layers=[5] * 6,
                            activation_settings={"type":"sin"})

        latent_size = 10
        modulator_nn = MLP(name="modulator_nn",
                        input_size=latent_size,
                        use_bias=False) 

        hyper_network = HyperNetwork(name="hyper_nn",
                                    modulator_nn=modulator_nn,synthesizer_nn=synthesizer_nn,
                                    coupling_settings={"modulator_to_synthesizer_coupling_mode":"one_modulator_per_synthesizer_layer"})

        # create fol optax-based optimizer
        main_loop_transform = optax.chain(optax.adam(1e-4))

        # create fol
        fol = MetaImplicitParametricOperatorLearning(name="meta_implicit_ol",control=self.fourier_control,
                                                        loss_function=self.mechanical_loss,
                                                        flax_neural_network=hyper_network,
                                                        main_loop_optax_optimizer=main_loop_transform,
                                                        latent_step_size=1e-2,
                                                        num_latent_iterations=3)
        
        fol.Initialize()

        synthesizer_weights = [[[0.1158100813627243, 0.10346230119466782, -0.03953862190246582, 0.19988465309143066, -0.2119332253932953], [0.28810596466064453, 0.2581026554107666, 0.277587890625, 0.10206484794616699, -0.2149478644132614], [0.07021832466125488, -0.027458351105451584, -0.2500579357147217, 0.07237895578145981, -0.09415857493877411]], [[0.033139731734991074, 0.02571248635649681, 0.023292548954486847, 0.010476265102624893, -0.01734086126089096], [-0.02707366831600666, -0.009819019585847855, 0.011584758758544922, -0.0265266802161932, 0.018994487822055817], [0.0022619885858148336, 0.007605121936649084, 0.01572149246931076, -0.01361064612865448, -0.0351361483335495], [-0.02280537225306034, -0.0021403073333203793, -0.0010035629384219646, -0.030474750325083733, 0.006036194507032633], [0.020463846623897552, -0.019895853474736214, 0.01743686944246292, -0.001803801511414349, 0.0007422839407809079]], [[-0.03262040391564369, -0.00855229701846838, 0.01844022423028946, 0.015666142106056213, 0.006383051630109549], [-0.034308016300201416, -0.003537486307322979, -0.0038127207662910223, -0.01564852148294449, -0.026090772822499275], [-0.005109025165438652, 0.005548425018787384, 0.015027595683932304, 0.03308912366628647, 0.01995231956243515], [0.019550075754523277, 0.007574050687253475, -0.03094503842294216, 0.014414053410291672, -0.011618015356361866], [-0.018825873732566833, -0.034938745200634, -0.002107704058289528, 0.015530800446867943, -0.0069599514827132225]], [[0.019013989716768265, -0.005253498442471027, -0.005086015909910202, -0.018340706825256348, -0.009076361544430256], [-0.029287155717611313, 0.003330279141664505, 0.011492486111819744, -0.03361786529421806, -0.014555679634213448], [0.009206896647810936, 0.024418672546744347, -0.01582026109099388, 0.02579132653772831, 0.018584931269288063], [0.023722711950540543, -0.03285151720046997, 0.01683213748037815, -0.03605729341506958, 0.027672139927744865], [0.030637601390480995, 0.012458988465368748, 0.0009596159216016531, 0.028754612430930138, -0.0035363545175641775]], [[0.02983187884092331, -0.019156616181135178, 0.014120684936642647, 0.028226744383573532, 0.0344928577542305], [-0.017219815403223038, 0.014688635244965553, -0.0013444565702229738, -0.031697019934654236, -0.0013010231778025627], [0.021276578307151794, -0.01689019612967968, 0.002378193661570549, -0.01621842011809349, 0.03613802418112755], [0.020953644067049026, -0.026728298515081406, -0.009415574371814728, -0.019086996093392372, -0.010234399698674679], [-0.028696823865175247, 0.026538094505667686, 0.0020164584275335073, 0.02476383186876774, -0.009661078453063965]], [[0.009412214159965515, 0.010729186236858368, -0.01240858156234026, -0.02799111232161522, -0.013370592147111893], [-0.024174708873033524, -0.030076494440436363, 0.006883749272674322, -0.0189106073230505, 0.004734796937555075], [-0.0021772636100649834, -0.01647692173719406, 0.029623888432979584, -0.027381112799048424, 0.03482214733958244], [-0.008928057737648487, 0.0026573718059808016, -0.01054738275706768, 0.011090033687651157, 0.03621663525700569], [-0.013570033013820648, -0.030513770878314972, 0.013194046914577484, 0.023067032918334007, 0.006773159373551607]], [[0.031764719635248184, -0.022432902827858925], [0.0002885020221583545, 0.016681674867868423], [-0.027956219390034676, 0.01517367921769619], [0.006994417868554592, 0.009736026637256145], [0.008900347165763378, -0.013512087054550648]]]
        for i in range(len(hyper_network.synthesizer_nn.nn_params)):
            hyper_network.synthesizer_nn.nn_params[i] = (nnx.Param(jnp.array(synthesizer_weights[i])),hyper_network.synthesizer_nn.nn_params[i][1])

        modulators_weights = [[[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]], [[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]], [[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]], [[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]], [[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]], [[0.06782472133636475, 0.013270664028823376, 0.09416637569665909, 0.006164884660393, -0.05689709261059761], [0.06488697975873947, 0.0999322161078453, 0.06665189564228058, 0.08069293946027756, -0.0015984534984454513], [0.09295918792486191, -0.08731605857610703, -0.056975461542606354, 0.007111168000847101, 0.08658605068922043], [0.06168007850646973, -0.07545044273138046, 0.0036594390403479338, 0.004041075706481934, 0.02861499786376953], [-0.0760979875922203, -0.06610391288995743, -0.06364929676055908, -0.07478666305541992, -0.0730479508638382], [-0.048381805419921875, -0.04024321958422661, 0.0967116579413414, 0.08936958760023117, -0.09451406449079514], [0.08343725651502609, -0.09447288513183594, -0.0730707198381424, 0.07253847271203995, -0.04816649109125137], [0.02764570713043213, -0.0029747963417321444, -0.053222037851810455, 0.09348690509796143, 0.033879876136779785], [0.0635671615600586, 0.03697626665234566, 0.02190089225769043, 0.01013727206736803, 0.092646025121212], [-0.0724172592163086, 0.06428618729114532, -0.0022723914589732885, 0.03941502794623375, -0.047701429575681686]]]
        for i in range(len(hyper_network.modulator_nns)):
            hyper_network.modulator_nns[i].nn_params[0] = (nnx.Param(jnp.array(modulators_weights[i])),hyper_network.modulator_nns[i].nn_params[0][1])


        train_start_id = 0
        train_end_id = 3
        fol.Train(train_set=(self.coeffs_matrix[train_start_id:train_end_id,:],),batch_size=1,
                    convergence_settings={"num_epochs":200,"relative_error":1e-100,
                                        "absolute_error":1e-100,"num_latent_itrs":3},
                    working_directory=self.test_directory)

        for eval_id in range(train_start_id,train_end_id):
            FOL_UV = np.array(fol.Predict(self.coeffs_matrix[eval_id,:].reshape(-1,1).T)).reshape(-1)
            if eval_id == 0:
                # print(np.array2string(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0], separator=', '))
                np.testing.assert_allclose(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0],
                                           np.array([0.        , 0.05660842, 0.07132874, 0.08825121, 0.1       , 0.        ,
                                                        0.04021242, 0.06211396, 0.07969093, 0.1       , 0.        , 0.02232464,
                                                        0.05297927, 0.07870141, 0.1       , 0.        , 0.02235071, 0.04325471,
                                                        0.06479848, 0.1       , 0.        , 0.01088459, 0.02748531, 0.05427517,
                                                        0.1       ]), rtol=1e-2, atol=1e-2)
                
            elif eval_id == 1:
                # print(np.array2string(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0], separator=', '))
                np.testing.assert_allclose(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0],
                                           np.array([0.        , 0.0454836 , 0.07428483, 0.09143757, 0.1       , 0.        ,
                                                        0.03004441, 0.0576078 , 0.0804189 , 0.1       , 0.        , 0.02387706,
                                                        0.05102006, 0.07749535, 0.1       , 0.        , 0.02055311, 0.04387766,
                                                        0.06924141, 0.1       , 0.        , 0.01051375, 0.02634382, 0.05527946,
                                                        0.1       ]),rtol=1e-2, atol=1e-2)
            elif eval_id == 2:
                # print(np.array2string(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0], separator=', '))
                np.testing.assert_allclose(FOL_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))[:,0],
                                           np.array([0.        , 0.04230206, 0.07419077, 0.09189638, 0.1       , 0.        ,
                                                    0.0278786 , 0.05642468, 0.08034506, 0.1       , 0.        , 0.02386063,
                                                    0.05079186, 0.07670901, 0.1       , 0.        , 0.01984064, 0.0433556 ,
                                                    0.06979178, 0.1       , 0.        , 0.00994958, 0.02527833, 0.05419116,
                                                    0.1       ]),rtol=1e-2, atol=1e-2)

            # the rest is for debugging purposes
            self.fe_mesh['U_FOL'] = FOL_UV
            # solve FE here
            FE_UV = np.array(self.linear_fe_solver.Solve(self.K_matrix[eval_id],np.zeros(2*self.fe_mesh.GetNumberOfNodes())))  
            self.fe_mesh['U_FE'] = FE_UV.reshape((self.fe_mesh.GetNumberOfNodes(), 2))

            absolute_error = abs(FOL_UV.reshape(-1,1)- FE_UV.reshape(-1,1))
            self.fe_mesh['abs_error'] = absolute_error.reshape((self.fe_mesh.GetNumberOfNodes(), 2))


            plot_mesh_vec_data(1,[FOL_UV[0::2],FOL_UV[1::2],absolute_error[0::2],absolute_error[1::2]],
                            ["U","V","abs_error_U","abs_error_V"],
                            fig_title="implicit FOL solution and error",
                            file_name=os.path.join(self.test_directory,f"FOL-UV-dist_test_{eval_id}.png"))
            plot_mesh_vec_data(1,[self.K_matrix[eval_id,:],FE_UV[0::2],FE_UV[1::2]],
                            ["K","U","V"],
                            fig_title="conductivity and FEM solution",
                            file_name=os.path.join(self.test_directory,f"FEM-KUV-dist_test_{eval_id}.png"))

        if self.debug_mode=="false":
            shutil.rmtree(self.test_directory)
        else:
            self.fe_mesh.Finalize(export_dir=self.test_directory)
if __name__ == '__main__':
    unittest.main()