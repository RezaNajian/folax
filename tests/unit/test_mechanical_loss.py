import pytest
import unittest 
import os
import numpy as np
from fol.loss_functions.mechanical import MechanicalLoss2DQuad
from fol.loss_functions.mechanical import MechanicalLoss3DTetra
from fol.loss_functions.mechanical import MechanicalLoss3DHexa
from fol.tools.usefull_functions import *

class TestMechanical3D(unittest.TestCase):

    @pytest.fixture(autouse=True)
    def _request_debug_mode(self,request):
        self.debug_mode = request.config.getoption('--debug-mode')

    def test_tetra(self):

        tet_points_coordinates = jnp.array([[0.1, 0.1, 0.1],
                                            [0.28739360416666665, 0.27808503701741405, 0.05672979583333333],
                                            [0.0, 1.0, 0.0],
                                            [0.0, 1.0, 0.1]])

        fe_mesh = Mesh("",".")
        fe_mesh.node_ids = jnp.arange(len(tet_points_coordinates))
        fe_mesh.nodes_coordinates = tet_points_coordinates
        fe_mesh.elements_nodes = {"tetra":fe_mesh.node_ids.reshape(1,-1)}

        mechanical_loss_3d = MechanicalLoss3DTetra("mechanical_loss_3d",loss_settings={"dirichlet_bc_dict":{"Ux":{},"Uy":{},"Uz":{}},
                                                                                       "material_dict":{"young_modulus":1,"poisson_ratio":0.3},
                                                                                       "body_foce":jnp.array([[1],[2],[3]])},
                                                                                        fe_mesh=fe_mesh)
        mechanical_loss_3d.Initialize()
        
        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(tet_points_coordinates,
                                                                        jnp.ones((4)),
                                                                        jnp.ones((12,1)))
        np.testing.assert_allclose(stiffness,jnp.array([[0.0655475,0.0178314,0,-0.0791652,-0.0126148,0,0.0342549,0.00545845,0.0694149,-0.0206373,-0.0106751,-0.0694149],
                                                        [0.0178314,0.0278547,0,-0.0158199,-0.0257944,0,0.00684531,0.0111613,0.027634,-0.00885683,-0.0132217,-0.027634],
                                                        [0,0,0.0207561,0,0,-0.0233243,0.0462766,0.0184227,0.0100925,-0.0462766,-0.0184227,-0.00752421],
                                                        [-0.0791652,-0.0158199,0,0.097806,0.0077351,0,-0.0423209,-0.00334699,-0.0865385,0.02368,0.0114318,0.0865385],
                                                        [-0.0126148,-0.0257944,0,0.0077351,0.0290496,0,-0.00334699,-0.0125698,-0.00961538,0.00822669,0.00931459,0.00961538],
                                                        [0,0,-0.0233243,0,0,0.0281901,-0.0576923,-0.00641026,-0.0121979,0.0576923,0.00641026,0.00733213],
                                                        [0.0342549,0.00684531,0.0462766,-0.0423209,-0.00334699,-0.0576923,0.13784,0.00144825,0.0624089,-0.129774,-0.00494657,-0.0509932],
                                                        [0.00545845,0.0111613,0.0184227,-0.00334699,-0.0125698,-0.00641026,0.00144825,0.124966,0.00693433,-0.0035597,-0.123558,-0.0189467],
                                                        [0.0694149,0.027634,0.0100925,-0.0865385,-0.00961538,-0.0121979,0.0624089,0.00693433,0.423624,-0.0452854,-0.0249529,-0.421519],
                                                        [-0.0206373,-0.00885683,-0.0462766,0.02368,0.00822669,0.0576923,-0.129774,-0.0035597,-0.0452854,0.126731,0.00418985,0.0338697],
                                                        [-0.0106751,-0.0132217,-0.0184227,0.0114318,0.00931459,0.00641026,-0.00494657,-0.123558,-0.0249529,0.00418985,0.127465,0.0369654],
                                                        [-0.0694149,-0.027634,-0.00752421,0.0865385,0.00961538,0.00733213,-0.0509932,-0.0189467,-0.421519,0.0338697,0.0369654,0.421711]])
                                                        ,rtol=1e-5, atol=1e-10)

        np.testing.assert_allclose(residuals.flatten(),jnp.array([-0.000776928,
                                                       -0.00155386,
                                                       -0.00233078,
                                                       -0.000776928,
                                                       -0.00155386,
                                                       -0.00233078,
                                                       -0.000776928,
                                                       -0.00155386,
                                                       -0.00233078,
                                                       -0.000776928,
                                                       -0.00155386,
                                                       -0.00233078])
                                   ,rtol=1e-4, atol=1e-10)

    def test_hexa(self):
        hex_points_coordinates = jnp.array([[0.24900,  0.34200,  0.19200],
                                            [0.32000,  0.18600,  0.64300],
                                            [0.16500,  0.74500,  0.70200],
                                            [0.27300,  0.75000,  0.23000],
                                            [0.00000,  0.00000,  0.00000],
                                            [0.00000,  0.00000,  1.00000],
                                            [0.00000,  1.00000,  1.00000],
                                            [0.00000,  1.00000,  0.00000]])
        
        fe_mesh = Mesh("",".")
        fe_mesh.node_ids = jnp.arange(len(hex_points_coordinates))
        fe_mesh.nodes_coordinates = hex_points_coordinates
        fe_mesh.elements_nodes = {"hexahedron":fe_mesh.node_ids.reshape(1,-1)}
        
        mechanical_loss_3d = MechanicalLoss3DHexa("mechanical_loss_3d",loss_settings={"dirichlet_bc_dict":{"Ux":{},"Uy":{},"Uz":{}},
                                                  "material_dict":{"young_modulus":1,"poisson_ratio":0.3},
                                                  "body_foce":jnp.array([[1],[2],[3]])},
                                                   fe_mesh=fe_mesh)
        mechanical_loss_3d.Initialize()

        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(hex_points_coordinates,
                                                                        jnp.ones((8)),
                                                                        jnp.ones((24,1)))

        np.testing.assert_allclose(stiffness,jnp.array([[0.454959,-0.0500367,-0.0641336,0.1074,-0.0172548,1.9623e-05,0.00352563,-0.00280706,-0.00110862,0.0976651,0.0138957,-0.0101607,-0.273185,-0.0235937,-0.0151987,-0.124267,-0.00715075,0.0602055,-0.0760015,0.0266272,0.0301667,-0.190097,0.0603202,0.000209816],[-0.0500367,0.173098,0.0226839,-0.0183445,0.0366768,-0.00293936,-0.00942565,-0.0214887,-0.0236469,-0.00765883,-0.00484127,-0.00295225,-0.000949502,-0.0555046,0.0117693,0.00315374,-0.0302826,0.00138512,0.0266272,-0.0292566,-0.00854678,0.0566343,-0.0684008,0.00224693],[-0.0641336,0.0226839,0.189547,-0.0239387,0.00407987,-0.00504276,-0.0101471,-0.0244001,-0.0289153,-0.0112665,-0.0107247,0.0335464,0.00986541,0.0125225,-0.0528893,0.0572247,0.00651332,-0.0540906,0.0301667,-0.00854678,-0.0326963,0.012229,-0.00212807,-0.049459],[0.1074,-0.0183445,-0.0239387,0.454119,-0.0396476,0.05598,0.168611,0.016259,0.0290825,0.0209791,0.00845157,-0.00652201,-0.212202,-0.0118574,-0.0627101,-0.264095,-0.0381757,0.0271085,-0.156743,0.0538336,0.0106947,-0.118069,0.029481,-0.0296949],[-0.0172548,0.0366768,0.00407987,-0.0396476,0.155115,-0.0138712,-0.00902948,0.0221257,-0.00508758,0.000278494,-0.0134602,0.015613,0.00109134,-0.0550062,0.000613972,-0.013977,-0.05474,-0.00958424,0.0490579,-0.0495061,-0.000696918,0.029481,-0.0412047,0.0089331],[1.9623e-05,-0.00293936,-0.00504276,0.05598,-0.0138712,0.16297,0.0276082,0.00327781,0.061869,-6.36812e-05,0.0169592,-0.00863719,-0.0572293,-0.00337641,-0.0755986,0.00462453,-0.0109304,-0.0550935,-0.0012444,0.00194731,-0.0377753,-0.0296949,0.0089331,-0.042692],[0.00352563,-0.00942565,-0.0101471,0.168611,-0.00902948,0.0276082,0.721827,0.103896,0.0998157,0.132106,0.0224561,-0.0163108,-0.137042,-0.0352372,-0.0361188,-0.237656,-0.073318,-0.00105277,-0.390219,0.00283387,0.0089296,-0.261152,-0.00217552,-0.072724],[-0.00280706,-0.0214887,-0.0244001,0.016259,0.0221257,0.00327781,0.103896,0.269904,0.0337513,0.0198119,0.0503159,-0.00198623,-0.0352372,-0.0540327,-0.0126105,-0.0675968,-0.0943717,-0.00043717,-0.0198104,-0.0984495,0.00683317,-0.0145153,-0.0740026,-0.00442831],[-0.00110862,-0.0236469,-0.0289153,0.0290825,-0.00508758,0.061869,0.0998157,0.0337513,0.270051,0.00727896,0.00713236,0.0104152,-0.0361188,-0.0126105,-0.0544787,-0.0140976,-0.00556538,-0.0663601,-0.0161345,0.00607997,-0.0957044,-0.0687176,-5.33087e-05,-0.0968764],[0.0976651,-0.00765883,-0.0112665,0.0209791,0.000278494,-6.36812e-05,0.132106,0.0198119,0.00727896,0.43692,0.0563607,-0.0356871,-0.159105,-0.0600098,-0.0102907,-0.0819896,-0.0280804,0.0248215,-0.154849,0.00250094,0.0542416,-0.291726,0.016797,-0.0290341],[0.0138957,-0.00484127,-0.0107247,0.00845157,-0.0134602,0.0169592,0.0224561,0.0503159,0.00713236,0.0563607,0.169907,-0.0144078,-0.0569329,-0.0636235,-0.0038326,-0.0280804,-0.0364728,0.0102351,-0.00874906,-0.0397103,0.00448237,-0.0074017,-0.0621144,-0.00984398],[-0.0101607,-0.00295225,0.0335464,-0.00652201,0.015613,-0.00863719,-0.0163108,-0.00198623,0.0104152,-0.0356871,-0.0144078,0.153356,0.00025415,0.000157788,-0.0416018,0.0248215,0.0102351,-0.0312734,0.050155,0.00183814,-0.0519826,-0.00655015,-0.00849783,-0.0638227],[-0.273185,-0.000949502,0.00986541,-0.212202,0.00109134,-0.0572293,-0.137042,-0.0352372,-0.0361188,-0.159105,-0.0569329,0.00025415,0.278042,0.0633428,0.0657456,0.170412,0.0461732,-0.0165057,0.129536,-0.00886158,-0.00985396,0.203544,-0.00862618,0.0438426],[-0.0235937,-0.0555046,0.0125225,-0.0118574,-0.0550062,-0.00337641,-0.0352372,-0.0540327,-0.0126105,-0.0600098,-0.0636235,0.000157788,0.0633428,0.124528,0.0225688,0.043529,0.0608071,-0.00313684,0.00716406,0.016036,-0.0201462,0.0166623,0.0267957,0.00402085],[-0.0151987,0.0117693,-0.0528893,-0.0627101,0.000613972,-0.0755986,-0.0361188,-0.0126105,-0.0544787,-0.0102907,-0.0038326,-0.0416018,0.0657456,0.0225688,0.125764,0.00708409,0.00598175,0.0161106,0.00617168,-0.0201462,0.0143515,0.0453169,-0.00434453,0.0683419],[-0.124267,0.00315374,0.0572247,-0.264095,-0.013977,0.00462453,-0.237656,-0.0675968,-0.0140976,-0.0819896,-0.0280804,0.0248215,0.170412,0.043529,0.00708409,0.229936,0.0659087,-0.0511128,0.169608,-0.00361556,-0.0345386,0.138052,0.000678352,0.00599421],[-0.00715075,-0.0302826,0.00651332,-0.0381757,-0.05474,-0.0109304,-0.073318,-0.0943717,-0.00556538,-0.0280804,-0.0364728,0.0102351,0.0461732,0.0608071,0.00598175,0.0659087,0.115634,-0.0226888,0.0179389,0.0201948,-0.00374094,0.016704,0.0192312,0.0201953],[0.0602055,0.00138512,-0.0540906,0.0271085,-0.00958424,-0.0550935,-0.00105277,-0.00043717,-0.0663601,0.0248215,0.0102351,-0.0312734,-0.0165057,-0.00313684,0.0161106,-0.0511128,-0.0226888,0.111574,-0.0334329,0.0040315,0.0586405,-0.0100314,0.0201953,0.0204924],[-0.0760015,0.0266272,0.0301667,-0.156743,0.0490579,-0.0012444,-0.390219,-0.0198104,-0.0161345,-0.154849,-0.00874906,0.050155,0.129536,0.00716406,0.00617168,0.169608,0.0179389,-0.0334329,0.273462,-0.0386764,-0.0470862,0.205206,-0.0335522,0.0114045],[0.0266272,-0.0292566,-0.00854678,0.0538336,-0.0495061,0.00194731,0.00283387,-0.0984495,0.00607997,0.00250094,-0.0397103,0.00183814,-0.00886158,0.016036,-0.0201462,-0.00361556,0.0201948,0.0040315,-0.0386764,0.113643,0.0166737,-0.034642,0.0670485,-0.00187766],[0.0301667,-0.00854678,-0.0326963,0.0106947,-0.000696918,-0.0377753,0.0089296,0.00683317,-0.0957044,0.0542416,0.00448237,-0.0519826,-0.00985396,-0.0201462,0.0143515,-0.0345386,-0.00374094,0.0586405,-0.0470862,0.0166737,0.114569,-0.0125538,0.00514157,0.0305974],[-0.190097,0.0566343,0.012229,-0.118069,0.029481,-0.0296949,-0.261152,-0.0145153,-0.0687176,-0.291726,-0.0074017,-0.00655015,0.203544,0.0166623,0.0453169,0.138052,0.016704,-0.0100314,0.205206,-0.034642,-0.0125538,0.314241,-0.0629227,0.070002],[0.0603202,-0.0684008,-0.00212807,0.029481,-0.0412047,0.0089331,-0.00217552,-0.0740026,-5.33087e-05,0.016797,-0.0621144,-0.00849783,-0.00862618,0.0267957,-0.00434453,0.000678352,0.0192312,0.0201953,-0.0335522,0.0670485,0.00514157,-0.0629227,0.132647,-0.0192462],[0.000209816,0.00224693,-0.049459,-0.0296949,0.0089331,-0.042692,-0.072724,-0.00442831,-0.0968764,-0.0290341,-0.00984398,-0.0638227,0.0438426,0.00402085,0.0683419,0.00599421,0.0201953,0.0204924,0.0114045,-0.00187766,0.0305974,0.070002,-0.0192462,0.133418]]),
                                   rtol=1e-5, atol=1e-5)
        
        np.testing.assert_allclose(residuals.flatten(),jnp.array([-0.014053,-0.0281059,-0.0421589,-0.015084,-0.0301681,-0.0452521,-0.0121963,-0.0243927,-0.036589,-0.0132622,-0.0265245,-0.0397867,-0.0225337,-0.0450673,-0.067601,-0.0233927,-0.0467855,-0.0701782,-0.0199257,-0.0398514,-0.059777,-0.021423,-0.042846,-0.064269]),
                                   rtol=1e-5, atol=1e-5)
        
    def test_quad(self):
                
        quad_points_coordinates = jnp.array([[3.00,0.00,0.00],
                                            [2.00,0.75,0.00],
                                            [0.75,1.00,0.00],
                                            [0.00,0.00,0.00]])

        fe_mesh = Mesh("",".")
        fe_mesh.node_ids = jnp.arange(len(quad_points_coordinates))
        fe_mesh.nodes_coordinates = quad_points_coordinates
        fe_mesh.elements_nodes = {"quad":fe_mesh.node_ids.reshape(1,-1)}

        mechanical_loss_3d = MechanicalLoss2DQuad("mechanical_loss_2d",
                                                  loss_settings={"dirichlet_bc_dict":{"Ux":{},"Uy":{},"Uz":{}},
                                                                 "material_dict":{"young_modulus":1, "poisson_ratio":0.3},
                                                                 "body_foce":jnp.array([[1],[2]])},
                                                                 fe_mesh=fe_mesh)
        mechanical_loss_3d.Initialize()

        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(quad_points_coordinates,
                                                                     jnp.ones((4)),
                                                                     jnp.ones((8,1)))

        np.testing.assert_allclose(stiffness,jnp.array([[0.370689,-0.13483,-0.286273,-0.0506739,-0.16991,0.161632,0.0854946,0.0238726],[-0.13483,0.78378,-0.0232014,-0.96204,0.161632,-0.377371,-0.00359995,0.555631],[-0.286273,-0.0232014,0.753914,0.263423,-0.132743,-0.0327318,-0.334898,-0.207489],[-0.0506739,-0.96204,0.263423,1.49651,-0.00525931,0.113882,-0.207489,-0.64835],[-0.16991,0.161632,-0.132743,-0.00525931,0.484173,-0.119682,-0.181519,-0.0366906],[0.161632,-0.377371,-0.0327318,0.113882,-0.119682,1.01349,-0.00921808,-0.750001],[0.0854946,-0.00359995,-0.334898,-0.207489,-0.181519,-0.00921808,0.430922,0.220307],[0.0238726,0.555631,-0.207489,-0.64835,-0.0366906,-0.750001,0.220307,0.84272]]),
                                   rtol=1e-5, atol=1e-5)
        
        np.testing.assert_allclose(residuals.flatten(),jnp.array([-0.494792,-0.989583,-0.364583,-0.729167,-0.427083,-0.854167,-0.557292,-1.11458]),
                                   rtol=1e-5, atol=1e-5)


if __name__ == '__main__':
    unittest.main()