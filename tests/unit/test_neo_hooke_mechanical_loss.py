import pytest
import unittest 
import os
import numpy as np
from fol.loss_functions.mechanical_neohooke import NeoHookeMechanicalLoss2DQuad
from fol.loss_functions.mechanical_neohooke import NeoHookeMechanicalLoss3DTetra
from fol.loss_functions.mechanical_neohooke import NeoHookeMechanicalLoss3DHexa
from fol.tools.usefull_functions import *

class TestMechanical3D(unittest.TestCase):

    @pytest.fixture(autouse=True)
    def _request_debug_mode(self,request):
        self.debug_mode = request.config.getoption('--debug-mode')

    def setUp(self):
        # problem setup
        self.fe_mesh = Mesh("box_io","box_3D_coarse.med",os.path.join(os.path.dirname(os.path.abspath(__file__)),"../meshes"))
        self.dirichlet_bc_dict = {"Ux":{"left":0.0},
                "Uy":{"left":0.0,"right":-0.25},
                "Uz":{"left":0.0,"right":-0.25}}

        self.fe_mesh.Initialize()

    def test_tetra(self):

        mechanical_loss_3d = NeoHookeMechanicalLoss3DTetra("mechanical_loss_3d",loss_settings={"dirichlet_bc_dict":self.dirichlet_bc_dict,
                                                                                       "material_dict":{"young_modulus":1,"poisson_ratio":0.3},
                                                                                       "body_foce":jnp.array([[1],[2],[3]])},
                                                                                        fe_mesh=self.fe_mesh)
        mechanical_loss_3d.Initialize()
        
        tet_points_coordinates = jnp.array([[0.1, 0.1, 0.1],
                                            [0.28739360416666665, 0.27808503701741405, 0.05672979583333333],
                                            [0.0, 1.0, 0.0],
                                            [0.0, 1.0, 0.1]])
        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(tet_points_coordinates,
                                                                        jnp.ones((4)),
                                                                        jnp.ones((12,1)))

        np.testing.assert_allclose(stiffness,jnp.array([[6.554754078e-02,1.783143356e-02,-5.668462366e-10,-7.916516811e-02,-1.261478197e-02,1.972369212e-10,3.425493091e-02,5.458430387e-03,6.941492110e-02,-2.063729800e-02,-1.067508198e-02,-6.941492110e-02],
                                                        [1.783143356e-02,2.785472944e-02,-2.256608650e-10,-1.581991278e-02,-2.579435147e-02,7.851969075e-11,6.845304277e-03,1.116126217e-02,2.763399109e-02,-8.856823668e-03,-1.322164107e-02,-2.763399109e-02],
                                                        [-5.668461811e-10,-2.256609760e-10,2.075605839e-02,7.066782159e-10,7.851982953e-11,-2.332433499e-02,4.627658427e-02,1.842265204e-02,1.009248663e-02,-4.627658427e-02,-1.842265204e-02,-7.524208631e-03],
                                                        [-7.916516811e-02,-1.581991464e-02,7.066782159e-10,9.780602157e-02,7.735087071e-03,-2.458921400e-10,-4.232086614e-02,-3.346974263e-03,-8.653849363e-02,2.368000895e-02,1.143180020e-02,8.653849363e-02],
                                                        [-1.261478197e-02,-2.579435147e-02,7.851971157e-11,7.735087071e-03,2.904958464e-02,-2.732140209e-11,-3.346981714e-03,-1.256981213e-02,-9.615371004e-03,8.226676844e-03,9.314578027e-03,9.615371004e-03],
                                                        [1.972368657e-10,7.851982259e-11,-2.332433499e-02,-2.458921122e-10,-2.732135351e-11,2.819013409e-02,-5.769229308e-02,-6.410246249e-03,-1.219792664e-02,5.769229308e-02,6.410246249e-03,7.332130801e-03],
                                                        [3.425493091e-02,6.845304277e-03,4.627658427e-02,-4.232086241e-02,-3.346981714e-03,-5.769228563e-02,1.378396899e-01,1.448239782e-03,6.240895018e-02,-1.297737509e-01,-4.946561996e-03,-5.099324137e-02],
                                                        [5.458430387e-03,1.116126217e-02,1.842265204e-02,-3.346974030e-03,-1.256981213e-02,-6.410247181e-03,1.448239665e-03,1.249663532e-01,6.934275851e-03,-3.559696022e-03,-1.235577911e-01,-1.894668303e-02],
                                                        [6.941492110e-02,2.763399109e-02,1.009248663e-02,-8.653849363e-02,-9.615371004e-03,-1.219792664e-02,6.240895018e-02,6.934275851e-03,4.236238897e-01,-4.528537765e-02,-2.495289594e-02,-4.215184748e-01],
                                                        [-2.063729800e-02,-8.856822737e-03,-4.627658427e-02,2.368001081e-02,8.226675913e-03,5.769228563e-02,-1.297737509e-01,-3.559696022e-03,-4.528537765e-02,1.267310381e-01,4.189842846e-03,3.386967257e-02],
                                                        [-1.067508105e-02,-1.322164014e-02,-1.842265204e-02,1.143180020e-02,9.314577095e-03,6.410246249e-03,-4.946561530e-03,-1.235577911e-01,-2.495289594e-02,4.189842846e-03,1.274648607e-01,3.696529940e-02],
                                                        [-6.941492110e-02,-2.763399109e-02,-7.524208631e-03,8.653849363e-02,9.615371004e-03,7.332130801e-03,-5.099324882e-02,-1.894668303e-02,-4.215184748e-01,3.386967257e-02,3.696530312e-02,4.217105806e-01]])
                                    ,rtol=1e-6, atol=1e-8)

        np.testing.assert_allclose(residuals.flatten(),jnp.array([-7.769288e-04,
                                                                    -1.553857e-03,
                                                                    -2.330785e-03,
                                                                    -7.769275e-04,
                                                                    -1.553855e-03,
                                                                    -2.330784e-03,
                                                                    -7.769284e-04,
                                                                    -1.553858e-03,
                                                                    -2.330786e-03,
                                                                    -7.769278e-04,
                                                                    -1.553854e-03,
                                                                    -2.330783e-03])
                                   ,rtol=1e-6, atol=1e-10)

    def test_hexa(self):
        hex_points_coordinates = jnp.array([[0.24900,  0.34200,  0.19200],
                                            [0.32000,  0.18600,  0.64300],
                                            [0.16500,  0.74500,  0.70200],
                                            [0.27300,  0.75000,  0.23000],
                                            [0.00000,  0.00000,  0.00000],
                                            [0.00000,  0.00000,  1.00000],
                                            [0.00000,  1.00000,  1.00000],
                                            [0.00000,  1.00000,  0.00000]])
        
        mechanical_loss_3d = NeoHookeMechanicalLoss3DHexa("mechanical_loss_3d",loss_settings={"dirichlet_bc_dict":self.dirichlet_bc_dict,
                                                  "material_dict":{"young_modulus":1,"poisson_ratio":0.3},
                                                  "body_foce":jnp.array([[1],[2],[3]])},
                                                   fe_mesh=self.fe_mesh)
        mechanical_loss_3d.Initialize()

        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(hex_points_coordinates,
                                                                        jnp.ones((8)),
                                                                        jnp.ones((24,1)))

        np.testing.assert_allclose(stiffness,jnp.array([[4.549594522e-01,-5.003672838e-02,-6.413360685e-02,1.073997691e-01,-1.725478657e-02,1.964451985e-05,3.525666660e-03,-2.807039069e-03,-1.108592260e-03,9.766509384e-02,1.389567368e-02,-1.016073581e-02,-2.731851339e-01,-2.359372564e-02,-1.519867871e-02,-1.242665201e-01,-7.150755264e-03,6.020548567e-02,-7.600150257e-02,2.662716620e-02,3.016666509e-02,-1.900967360e-01,6.032019854e-02,2.098211844e-04],
                                                        [-5.003672838e-02,1.730976105e-01,2.268392034e-02,-1.834451966e-02,3.667685762e-02,-2.939373022e-03,-9.425653145e-03,-2.148865722e-02,-2.364686877e-02,-7.658835500e-03,-4.841253161e-03,-2.952240175e-03,-9.494867409e-04,-5.550459400e-02,1.176929660e-02,3.153744387e-03,-3.028255887e-02,1.385112060e-03,2.662717551e-02,-2.925664186e-02,-8.546777070e-03,5.663431063e-02,-6.840075552e-02,2.246924443e-03],
                                                        [-6.413360685e-02,2.268392034e-02,1.895467192e-01,-2.393872105e-02,4.079876933e-03,-5.042766221e-03,-1.014708262e-02,-2.440006845e-02,-2.891527116e-02,-1.126649603e-02,-1.072469447e-02,3.354643285e-02,9.865440428e-03,1.252250373e-02,-5.288927257e-02,5.722471327e-02,6.513323635e-03,-5.409055203e-02,3.016668372e-02,-8.546780795e-03,-3.269630298e-02,1.222905703e-02,-2.128081163e-03,-4.945898801e-02],
                                                        [1.073997617e-01,-1.834452152e-02,-2.393871918e-02,4.541185796e-01,-3.964758664e-02,5.597997084e-02,1.686107218e-01,1.625901647e-02,2.908253670e-02,2.097911201e-02,8.451568894e-03,-6.522016600e-03,-2.122016847e-01,-1.185737550e-02,-6.271006167e-02,-2.640953362e-01,-3.817571700e-02,2.710850164e-02,-1.567426324e-01,5.383357778e-02,1.069471333e-02,-1.180684716e-01,2.948103473e-02,-2.969491854e-02],
                                                        [-1.725478657e-02,3.667685762e-02,4.079878796e-03,-3.964758664e-02,1.551146060e-01,-1.387121994e-02,-9.029516019e-03,2.212568931e-02,-5.087582394e-03,2.784885291e-04,-1.346017234e-02,1.561301481e-02,1.091356389e-03,-5.500619486e-02,6.139780162e-04,-1.397697441e-02,-5.473993346e-02,-9.584245272e-03,4.905796796e-02,-4.950613528e-02,-6.969276001e-04,2.948105149e-02,-4.120468348e-02,8.933102712e-03],
                                                        [1.964353578e-05,-2.939372789e-03,-5.042768084e-03,5.597997084e-02,-1.387121901e-02,1.629704237e-01,2.760819346e-02,3.277823329e-03,6.186894700e-02,-6.368146569e-05,1.695916057e-02,-8.637200110e-03,-5.722928792e-02,-3.376410110e-03,-7.559853047e-02,4.624511581e-03,-1.093039103e-02,-5.509351939e-02,-1.244410872e-03,1.947309938e-03,-3.777533397e-02,-2.969492227e-02,8.933098987e-03,-4.269201308e-02],
                                                        [3.525662702e-03,-9.425653145e-03,-1.014708076e-02,1.686106920e-01,-9.029518813e-03,2.760819346e-02,7.218258381e-01,1.038957387e-01,9.981554002e-02,1.321056932e-01,2.245615795e-02,-1.631080918e-02,-1.370415837e-01,-3.523720801e-02,-3.611881286e-02,-2.376563102e-01,-7.331797481e-02,-1.052723033e-03,-3.902186751e-01,2.833952196e-03,8.929705247e-03,-2.611513734e-01,-2.175481291e-03,-7.272400707e-02],
                                                        [-2.807039768e-03,-2.148865722e-02,-2.440006658e-02,1.625901274e-02,2.212568745e-02,3.277821932e-03,1.038957313e-01,2.699033916e-01,3.375122324e-02,1.981189661e-02,5.031589419e-02,-1.986239105e-03,-3.523721173e-02,-5.403267220e-02,-1.261046901e-02,-6.759678572e-02,-9.437164664e-02,-4.371597024e-04,-1.981035247e-02,-9.844944626e-02,6.833192427e-03,-1.451524626e-02,-7.400254905e-02,-4.428297747e-03],
                                                        [-1.108595054e-03,-2.364686877e-02,-2.891527116e-02,2.908253670e-02,-5.087580997e-03,6.186895445e-02,9.981553257e-02,3.375121951e-02,2.700505257e-01,7.279014681e-03,7.132371888e-03,1.041519456e-02,-3.611881658e-02,-1.261046808e-02,-5.447863415e-02,-1.409762166e-02,-5.565369502e-03,-6.636003405e-02,-1.613447070e-02,6.079982501e-03,-9.570434690e-02,-6.871758401e-02,-5.329226769e-05,-9.687637538e-02],
                                                        [9.766508639e-02,-7.658828516e-03,-1.126649510e-02,2.097911015e-02,2.784871322e-04,-6.368246250e-05,1.321057081e-01,1.981189661e-02,7.279014681e-03,4.369202554e-01,5.636064336e-02,-3.568708524e-02,-1.591055095e-01,-6.000974402e-02,-1.029071305e-02,-8.198964596e-02,-2.808042802e-02,2.482153289e-02,-1.548487246e-01,2.500945237e-03,5.424155667e-02,-2.917262614e-01,1.679702848e-02,-2.903412469e-02],
                                                        [1.389567181e-02,-4.841253161e-03,-1.072469447e-02,8.451567963e-03,-1.346017420e-02,1.695916243e-02,2.245615795e-02,5.031589419e-02,7.132371888e-03,5.636064336e-02,1.699065119e-01,-1.440778282e-02,-5.693286285e-02,-6.362350285e-02,-3.832591930e-03,-2.808043920e-02,-3.647278622e-02,1.023514848e-02,-8.749065921e-03,-3.971033543e-02,4.482367542e-03,-7.401674986e-03,-6.211434677e-02,-9.843980893e-03],
                                                        [-1.016073674e-02,-2.952239243e-03,3.354643658e-02,-6.522017531e-03,1.561301388e-02,-8.637199178e-03,-1.631080918e-02,-1.986240502e-03,1.041519269e-02,-3.568708524e-02,-1.440778375e-02,1.533561051e-01,2.541584254e-04,1.577911316e-04,-4.160182923e-02,2.482155338e-02,1.023515128e-02,-3.127345443e-02,5.015508085e-02,1.838133321e-03,-5.198257789e-02,-6.550147664e-03,-8.497827686e-03,-6.382266432e-02],
                                                        [-2.731851339e-01,-9.494849364e-04,9.865444154e-03,-2.122016847e-01,1.091356040e-03,-5.722929165e-02,-1.370415688e-01,-3.523721173e-02,-3.611881286e-02,-1.591055095e-01,-5.693286285e-02,2.541582799e-04,2.780419588e-01,6.334272772e-02,6.574559957e-02,1.704119891e-01,4.617322981e-02,-1.650566608e-02,1.295356005e-01,-8.861582726e-03,-9.853972122e-03,2.035443336e-01,-8.626174182e-03,4.384254664e-02],
                                                        [-2.359372564e-02,-5.550459400e-02,1.252250466e-02,-1.185737643e-02,-5.500619486e-02,-3.376410110e-03,-3.523720801e-02,-5.403267220e-02,-1.261046715e-02,-6.000974029e-02,-6.362350285e-02,1.577910589e-04,6.334272772e-02,1.245281547e-01,2.256876417e-02,4.352898896e-02,6.080710888e-02,-3.136847168e-03,7.164062466e-03,1.603598334e-02,-2.014618181e-02,1.666226611e-02,2.679570392e-02,4.020849708e-03],
                                                        [-1.519867964e-02,1.176929660e-02,-5.288927257e-02,-6.271005422e-02,6.139775505e-04,-7.559853047e-02,-3.611881286e-02,-1.261047088e-02,-5.447863415e-02,-1.029071212e-02,-3.832591698e-03,-4.160182923e-02,6.574559212e-02,2.256876230e-02,1.257642210e-01,7.084091194e-03,5.981746130e-03,1.611061767e-02,6.171675865e-03,-2.014619485e-02,1.435150765e-02,4.531690106e-02,-4.344525747e-03,6.834189594e-02],
                                                        [-1.242665201e-01,3.153745085e-03,5.722471327e-02,-2.640953660e-01,-1.397697628e-02,4.624515772e-03,-2.376563251e-01,-6.759679317e-02,-1.409762166e-02,-8.198964596e-02,-2.808043920e-02,2.482155524e-02,1.704120040e-01,4.352898896e-02,7.084090728e-03,2.299355417e-01,6.590870768e-02,-5.111279711e-02,1.696083099e-01,-3.615580965e-03,-3.453865647e-02,1.380520314e-01,6.783395656e-04,5.994205363e-03],
                                                        [-7.150755264e-03,-3.028255701e-02,6.513324566e-03,-3.817572072e-02,-5.473993719e-02,-1.093039196e-02,-7.331797481e-02,-9.437164664e-02,-5.565370433e-03,-2.808042802e-02,-3.647278622e-02,1.023515128e-02,4.617322981e-02,6.080710888e-02,5.981746130e-03,6.590871513e-02,1.156338453e-01,-2.268876322e-02,1.793894731e-02,2.019478194e-02,-3.740947694e-03,1.670398936e-02,1.923117414e-02,2.019525319e-02],
                                                        [6.020548567e-02,1.385111944e-03,-5.409055203e-02,2.710850164e-02,-9.584243409e-03,-5.509352311e-02,-1.052722335e-03,-4.371596733e-04,-6.636003405e-02,2.482153103e-02,1.023514848e-02,-3.127345815e-02,-1.650566421e-02,-3.136846703e-03,1.611062326e-02,-5.111279711e-02,-2.268876322e-02,1.115740389e-01,-3.343288973e-02,4.031505436e-03,5.864052102e-02,-1.003144309e-02,2.019524761e-02,2.049236931e-02],
                                                        [-7.600150257e-02,2.662717365e-02,3.016668558e-02,-1.567426473e-01,4.905796796e-02,-1.244410756e-03,-3.902187049e-01,-1.981035247e-02,-1.613447256e-02,-1.548487395e-01,-8.749066852e-03,5.015508085e-02,1.295356005e-01,7.164062001e-03,6.171675399e-03,1.696083248e-01,1.793894544e-02,-3.343288973e-02,2.734616995e-01,-3.867647797e-02,-4.708618298e-02,2.052059770e-01,-3.355224803e-02,1.140451524e-02],
                                                        [2.662716433e-02,-2.925664186e-02,-8.546781726e-03,5.383357406e-02,-4.950613156e-02,1.947309938e-03,2.833945444e-03,-9.844945371e-02,6.079982035e-03,2.500945935e-03,-3.971033543e-02,1.838133321e-03,-8.861581795e-03,1.603598334e-02,-2.014619671e-02,-3.615581663e-03,2.019478567e-02,4.031505901e-03,-3.867647424e-02,1.136432439e-01,1.667371020e-02,-3.464199603e-02,6.704853475e-02,-1.877665054e-03],
                                                        [3.016666509e-02,-8.546777070e-03,-3.269630298e-02,1.069471240e-02,-6.969274255e-04,-3.777533397e-02,8.929702453e-03,6.833192892e-03,-9.570433944e-02,5.424155295e-02,4.482367542e-03,-5.198257789e-02,-9.853972122e-03,-2.014618181e-02,1.435150951e-02,-3.453865647e-02,-3.740947228e-03,5.864052102e-02,-4.708618671e-02,1.667371020e-02,1.145691499e-01,-1.255382691e-02,5.141564179e-03,3.059735708e-02],
                                                        [-1.900967360e-01,5.663431063e-02,1.222905796e-02,-1.180684790e-01,2.948105149e-02,-2.969492413e-02,-2.611513734e-01,-1.451524440e-02,-6.871758401e-02,-2.917262614e-01,-7.401674986e-03,-6.550150923e-03,2.035443485e-01,1.666226424e-02,4.531690106e-02,1.380520165e-01,1.670398936e-02,-1.003144030e-02,2.052059770e-01,-3.464199603e-02,-1.255382597e-02,3.142404854e-01,-6.292270124e-02,7.000195980e-02],
                                                        [6.032020226e-02,-6.840076298e-02,-2.128080931e-03,2.948103473e-02,-4.120468348e-02,8.933098987e-03,-2.175480826e-03,-7.400254160e-02,-5.329226769e-05,1.679702848e-02,-6.211434677e-02,-8.497827686e-03,-8.626174182e-03,2.679570392e-02,-4.344525747e-03,6.783383433e-04,1.923117600e-02,2.019524947e-02,-3.355224803e-02,6.704853475e-02,5.141564179e-03,-6.292269379e-02,1.326469332e-01,-1.924618520e-02],
                                                        [2.098207187e-04,2.246925142e-03,-4.945899546e-02,-2.969491854e-02,8.933102712e-03,-4.269201308e-02,-7.272400707e-02,-4.428298678e-03,-9.687637538e-02,-2.903412469e-02,-9.843980893e-03,-6.382267177e-02,4.384254664e-02,4.020848311e-03,6.834189594e-02,5.994205363e-03,2.019525319e-02,2.049236931e-02,1.140451618e-02,-1.877666102e-03,3.059735708e-02,7.000196725e-02,-1.924618334e-02,1.334184259e-01]]),
                                    rtol=1e-9, atol=1e-10)
        
        np.testing.assert_allclose(residuals.flatten(),jnp.array([-1.405296475e-02,
                                                                    -2.810593322e-02,
                                                                    -4.215889424e-02,
                                                                    -1.508402452e-02,
                                                                    -3.016807698e-02,
                                                                    -4.525211081e-02,
                                                                    -1.219628099e-02,
                                                                    -2.439263836e-02,
                                                                    -3.658897430e-02,
                                                                    -1.326225046e-02,
                                                                    -2.652444877e-02,
                                                                    -3.978668153e-02,
                                                                    -2.253366448e-02,
                                                                    -4.506731406e-02,
                                                                    -6.760097295e-02,
                                                                    -2.339276113e-02,
                                                                    -4.678549990e-02,
                                                                    -7.017824054e-02,
                                                                    -1.992569864e-02,
                                                                    -3.985136747e-02,
                                                                    -5.977705494e-02,
                                                                    -2.142298408e-02,
                                                                    -4.284597933e-02,
                                                                    -6.426896155e-02]),
                                    rtol=1e-9, atol=1e-10)
        
    def test_quad(self):
                
        quad_points_coordinates = jnp.array([[3.00,0.00,0.00],
                                            [2.00,0.75,0.00],
                                            [0.75,1.00,0.00],
                                            [0.00,0.00,0.00]])

        self.dirichlet_bc_dict = {"Ux":{"left":0.0},
                "Uy":{"left":0.0,"right":-0.25}}

        mechanical_loss_3d = NeoHookeMechanicalLoss2DQuad("mechanical_loss_2d",
                                                  loss_settings={"dirichlet_bc_dict":self.dirichlet_bc_dict,
                                                                 "material_dict":{"young_modulus":1, "poisson_ratio":0.3},
                                                                 "body_foce":jnp.array([[1],[2]])},
                                                                 fe_mesh=self.fe_mesh)
        mechanical_loss_3d.Initialize()

        en, residuals, stiffness = mechanical_loss_3d.ComputeElement(quad_points_coordinates,
                                                                     jnp.ones((4)),
                                                                     jnp.ones((8,1)))

        np.testing.assert_allclose(stiffness,jnp.array([[3.825861216e-01,-1.573022306e-01,-2.800459266e-01,-2.706828900e-02,-1.745809466e-01,1.885703951e-01,7.204076648e-02,-4.199891351e-03],
                                                        [-1.573022157e-01,8.645253778e-01,-5.911948159e-02,-1.068440914e+00,1.885704398e-01,-4.166179001e-01,2.785125561e-02,6.205335259e-01],
                                                        [-2.800459564e-01,-5.911948159e-02,7.823255062e-01,3.073264062e-01,-1.540518403e-01,-6.135872565e-03,-3.482277691e-01,-2.420710176e-01],
                                                        [-2.706830390e-02,-1.068440795e+00,3.073264062e-01,1.648686171e+00,-3.818710521e-02,1.336775422e-01,-2.420709878e-01,-7.139227986e-01],
                                                        [-1.745809466e-01,1.885704398e-01,-1.540518403e-01,-3.818711266e-02,5.001542568e-01,-1.396288723e-01,-1.715215147e-01,-1.075445861e-02],
                                                        [1.885704100e-01,-4.166179299e-01,-6.135870237e-03,1.336775422e-01,-1.396288723e-01,1.117690444e+00,-4.280564561e-02,-8.347501755e-01],
                                                        [7.204076648e-02,2.785125375e-02,-3.482277393e-01,-2.420710027e-01,-1.715215147e-01,-4.280564189e-02,4.477085173e-01,2.570253909e-01],
                                                        [-4.199895076e-03,6.205335259e-01,-2.420710176e-01,-7.139227986e-01,-1.075445395e-02,-8.347500563e-01,2.570253611e-01,9.281393290e-01]]),
                                   rtol=1e-6, atol=1e-8)

        np.testing.assert_allclose(residuals.flatten(),jnp.array([-4.947916269e-01,
                                                                    -9.895831943e-01,
                                                                    -3.645833433e-01,
                                                                    -7.291667461e-01,
                                                                    -4.270833135e-01,
                                                                    -8.541666865e-01,
                                                                    -5.572916269e-01,
                                                                    -1.114583135e+00]),
                                   rtol=1e-9, atol=1e-10)


if __name__ == '__main__':
    unittest.main()